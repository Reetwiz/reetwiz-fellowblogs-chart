apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "reetwiz-fellowblogs-chart.fullname" . }}-{{ .Values.backend1.name }}
  labels:
    {{- include "reetwiz-fellowblogs-chart.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.backend1.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "reetwiz-fellowblogs-chart.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ .Values.backend1.name }}
  template:
    metadata:
      labels:
        {{- include "reetwiz-fellowblogs-chart.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ .Values.backend1.name }}
    spec:
      {{- if .Values.imagePullSecrets.enabled }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets.name }}
      {{- end }}
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.36
        command: ['sh', '-c', 'until nc -z -w 2 {{ include "reetwiz-fellowblogs-chart.fullname" . }}-{{ .Values.postgres.name }}-primary {{ .Values.postgres.service.primary.port }}; do echo "Waiting for postgres primary..."; sleep 2; done;']
      containers:
      - name: {{ .Values.backend1.name }}
        image: "{{ .Values.backend1.image.repository }}:{{ .Values.backend1.image.tag }}"
        imagePullPolicy: {{ .Values.backend1.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.backend1.service.port }}
        env:
        - name: PORT
          value: {{ .Values.backend1.service.port | quote }}
        - name: DB_PASSWORD
          valueFrom: { secretKeyRef: { name: {{ include "reetwiz-fellowblogs-chart.fullname" . }}-postgres-secret, key: POSTGRES_PASSWORD } }
        envFrom:
        - configMapRef: { name: {{ include "reetwiz-fellowblogs-chart.fullname" . }}-config }
        - secretRef: { name: {{ include "reetwiz-fellowblogs-chart.fullname" . }}-app-secrets }
        {{- if .Values.probes.enabled }}
        livenessProbe:
          httpGet: { path: {{ .Values.probes.healthPath }}, port: {{ .Values.backend1.service.port }} }
          initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
        readinessProbe:
          httpGet: { path: {{ .Values.probes.healthPath }}, port: {{ .Values.backend1.service.port }} }
          initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
        {{- end }}
